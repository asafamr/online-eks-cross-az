Description: This stack creates the resources needed to gain visibility of inter-az traffic between pods on an EKS cluster
Parameters:
  eksVpcId:
    Type: String
    Description: The ID of the VPC the EKS cluster is in.
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Resources:
  podstatebucket582E33CB:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/pod-state-bucket/Resource
  podstatebucketPolicyBF2A9932:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: podstatebucket582E33CB
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - podstatebucket582E33CB
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - podstatebucket582E33CB
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/pod-state-bucket/Policy/Resource
  FlowLogsvpcflowlogsbucket8625B84A:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/FlowLogs/vpc-flow-logs-bucket/Resource
  FlowLogsvpcflowlogsbucketPolicyD4D41E13:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FlowLogsvpcflowlogsbucket8625B84A
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - FlowLogsvpcflowlogsbucket8625B84A
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - FlowLogsvpcflowlogsbucket8625B84A
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/FlowLogs/vpc-flow-logs-bucket/Policy/Resource
  FlowLogseksinterazvisibilitys3flowlogsB1D56A02:
    Type: AWS::EC2::FlowLog
    Properties:
      DestinationOptions:
        FileFormat: parquet
        HiveCompatiblePartitions: false
        PerHourPartition: true
      LogDestination:
        Fn::GetAtt:
          - FlowLogsvpcflowlogsbucket8625B84A
          - Arn
      LogDestinationType: s3
      LogFormat: ${az-id} ${flow-direction} ${pkt-srcaddr} ${pkt-dstaddr} ${start} ${bytes}
      ResourceId:
        Ref: eksVpcId
      ResourceType: VPC
      TrafficType: ALL
    DependsOn:
      - FlowLogsvpcflowlogsbucketPolicyD4D41E13
      - FlowLogsvpcflowlogsbucket8625B84A
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/FlowLogs/eks-inter-az-visibility-s3-flow-logs
  AthenaAnalyzerathenaresults88B510AC:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/athena-results/Resource
  AthenaAnalyzerathenaresultsPolicy9EDC61B3:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: AthenaAnalyzerathenaresults88B510AC
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - AthenaAnalyzerathenaresults88B510AC
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - AthenaAnalyzerathenaresults88B510AC
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/athena-results/Policy/Resource
  AthenaAnalyzereksinterazvisibilitydatabase2A4D92F2:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: {"Ref": "AWS::AccountId"}
      DatabaseInput:
        Name: eks-inter-az-visibility
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/eks-inter-az-visibility-database/Resource
  AthenaAnalyzerGlueDataCatalogEncryption76956A30:
    Type: AWS::Glue::DataCatalogEncryptionSettings
    Properties:
      CatalogId: {"Ref": "AWS::AccountId"}
      DataCatalogEncryptionSettings:
        EncryptionAtRest:
          CatalogEncryptionMode: SSE-KMS
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/Glue-Data-Catalog-Encryption
  AthenaAnalyzerpodstableTable59EBB00B:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: {"Ref": "AWS::AccountId"}
      DatabaseName:
        Ref: AthenaAnalyzereksinterazvisibilitydatabase2A4D92F2
      TableInput:
        Description: pods-table generated by CDK
        Name: pods-table
        Parameters:
          classification: csv
          has_encrypted_data: true
          skip.header.line.count: "1"
        StorageDescriptor:
          Columns:
            - Name: name
              Type: string
            - Name: ip
              Type: string
            - Name: app
              Type: string
            - Name: creation_time
              Type: string
            - Name: node
              Type: string
            - Name: az
              Type: string
          Compressed: false
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location:
            Fn::Join:
              - ""
              - - s3://
                - Ref: podstatebucket582E33CB
                - /
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.OpenCSVSerde
          StoredAsSubDirectories: false
        TableType: EXTERNAL_TABLE
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/pods-table/Table
  AthenaAnalyzerflowlogstableTableD01608E8:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: {"Ref": "AWS::AccountId"}
      DatabaseName:
        Ref: AthenaAnalyzereksinterazvisibilitydatabase2A4D92F2
      TableInput:
        Description: vpc-flow-logs-table generated by CDK
        Name: vpc-flow-logs-table
        Parameters:
          classification: parquet
          has_encrypted_data: true
        StorageDescriptor:
          Columns:
            - Name: az_id
              Type: string
            - Name: flow_direction
              Type: string
            - Name: pkt_srcaddr
              Type: string
            - Name: pkt_dstaddr
              Type: string
            - Name: start
              Type: bigint
            - Name: bytes
              Type: bigint
          Compressed: false
          InputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat
          Location:
            Fn::Join:
              - ""
              - - s3://
                - Ref: FlowLogsvpcflowlogsbucket8625B84A
                - /
          OutputFormat: org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe
          StoredAsSubDirectories: false
        TableType: EXTERNAL_TABLE
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/flow-logs-table/Table
  AthenaAnalyzerquerycrossaztrafficbyapp659310A2:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database:
        Ref: AthenaAnalyzereksinterazvisibilitydatabase2A4D92F2
      Description: Joins VPC Flow Logs and pod-metadata-extractor results to gain visibility of inter-az traffic between pods in an EKS cluster
      Name: query-cross-az-traffic-by-app
      QueryString:
        Fn::Join:
          - ""
          - - |-
              


              WITH
              ip_addresses_and_az_mapping AS (
              SELECT DISTINCT pkt_srcaddr as ipaddress, az_id
              FROM "
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - |-
              "
              WHERE flow_direction = 'egress'
              and from_unixtime("
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - |-
              ".start)>(CURRENT_TIMESTAMP - (60 * interval '1' minute))
              ),
              egress_flows_of_pods_with_status AS (
              SELECT
              "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".name as srcpodname,
              "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".app as srcpodapp,
              pkt_srcaddr as srcaddr,
              pkt_dstaddr as dstaddr,
              "
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - |-
              ".az_id as srcazid,
              bytes, 
              start
              FROM "
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - |-
              "
              INNER JOIN "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - '" ON "'
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - '".pkt_srcaddr = "'
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".ip
              WHERE flow_direction = 'egress'
              and from_unixtime("
            - Ref: AthenaAnalyzerflowlogstableTableD01608E8
            - |-
              ".start)>(CURRENT_TIMESTAMP - (60 * interval '1' minute))
              ),

              cross_az_traffic_by_pod as (
              SELECT
              srcaddr,
              srcpodname,
              srcpodapp,
              dstaddr,
              "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".name as dstpodname,
              "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".app as dstpodapp,
              srcazid,
              ip_addresses_and_az_mapping.az_id as dstazid,
              bytes,
              start
              FROM egress_flows_of_pods_with_status
              INNER JOIN "
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - '" ON dstaddr = "'
            - Ref: AthenaAnalyzerpodstableTable59EBB00B
            - |-
              ".ip
              LEFT JOIN ip_addresses_and_az_mapping ON dstaddr = ipaddress
              WHERE ip_addresses_and_az_mapping.az_id != srcazid
              )

              SELECT date_trunc('MINUTE', from_unixtime(start)) AS time, CONCAT(srcpodapp, ' -> ', dstpodapp) as inter_az_traffic, sum(bytes) as total_bytes
              FROM cross_az_traffic_by_pod
              WHERE srcpodapp!='<none>' AND dstpodapp!='<none>'
              GROUP BY date_trunc('MINUTE', from_unixtime(start)), CONCAT(srcpodapp, ' -> ', dstpodapp)
              ORDER BY time, total_bytes DESC
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/AthenaAnalyzer/query-cross-az-traffic-by-app
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/0VPwU7DMAz9lt5dj25CiBtiwAmhsnFHbmba0CyZEkdTFfXfSdQCB+vZz0/v2Vu8v8XUVHQNtTqNtdEdpqOQGmH/ZVvydGZhDwcOLnrFkIWfKewwPUY1shTV2i3QOqPV9E8v8wystpjJF+Our66H3kTGlIknEuooMKz9Ppdx/bNVfrqIdvbIItr2oQg+qDM8A8nAlordWz7v9B7Z54Q8/l45Q1OTuQyEN9XD+tqmYIldN+kveXGdoZ1kcHazw6bBu+o7aF37aEWfGQ8L/gAoE+txLgEAAA==
    Metadata:
      aws:cdk:path: CdkEksInterAzVisibility/CDKMetadata/Default
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

